// Generated by psc version 0.6.9.5
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;
    
    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;
    
    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;
    
    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;
    
    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;
    
    function unsafeCompareImpl(lt) {
      return function(eq) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x > y ? gt : eq;
            };
          };
        };
      };
    }
    ;
    
    function boolAnd(b1) {
      return function(b2) {
        return b1 && b2;
      };
    }
    ;
    
    function boolOr(b1) {
      return function(b2) {
        return b1 || b2;
      };
    }
    ;
    
    function boolNot(b) {
      return !b;
    }
    ;
    
    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;
    var LT = (function () {
        function LT() {

        };
        LT.value = new LT();
        return LT;
    })();
    var GT = (function () {
        function GT() {

        };
        GT.value = new GT();
        return GT;
    })();
    var EQ = (function () {
        function EQ() {

        };
        EQ.value = new EQ();
        return EQ;
    })();
    var Semigroupoid = function ($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    var Semiring = function ($times, $plus, one, zero) {
        this["*"] = $times;
        this["+"] = $plus;
        this.one = one;
        this.zero = zero;
    };
    var Ring = function ($minus, __superclass_Prelude$dotSemiring_0) {
        this["-"] = $minus;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    };
    var Eq = function ($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    var Ord = function (__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    var BoolLike = function ($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    var Semigroup = function ($less$greater) {
        this["<>"] = $less$greater;
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus$plus = function (__dict_Semigroup_2) {
        return $less$greater(__dict_Semigroup_2);
    };
    var $plus = function (dict) {
        return dict["+"];
    };
    var $times = function (dict) {
        return dict["*"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var zero = function (dict) {
        return dict.zero;
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupString = new Semigroup(concatString);
    var ringNumber = new Ring(numSub, function () {
        return semiringNumber;
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var not = function (dict) {
        return dict.not;
    };
    var negate = function (__dict_Ring_6) {
        return function (a) {
            return $minus(__dict_Ring_6)(zero(__dict_Ring_6["__superclass_Prelude.Semiring_0"]()))(a);
        };
    };
    var liftA1 = function (__dict_Applicative_8) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
            };
        };
    };
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _267 = compare(__dict_Ord_12)(a1)(a2);
                if (_267 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_13) {
        return function (a1) {
            return function (a2) {
                var _268 = compare(__dict_Ord_13)(a1)(a2);
                if (_268 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var $greater = function (__dict_Ord_14) {
        return function (a1) {
            return function (a2) {
                var _269 = compare(__dict_Ord_14)(a1)(a2);
                if (_269 instanceof GT) {
                    return true;
                };
                return false;
            };
        };
    };
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_5) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_4) {
                        return $$return(__dict_Monad_16)(_5(_4));
                    });
                });
            };
        };
    };
    return {
        LT: LT, 
        GT: GT, 
        EQ: EQ, 
        Semigroup: Semigroup, 
        BoolLike: BoolLike, 
        Ord: Ord, 
        Eq: Eq, 
        Ring: Ring, 
        Semiring: Semiring, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Semigroupoid: Semigroupoid, 
        "++": $plus$plus, 
        "<>": $less$greater, 
        not: not, 
        "&&": $amp$amp, 
        "<=": $less$eq, 
        ">": $greater, 
        "<": $less, 
        compare: compare, 
        "==": $eq$eq, 
        negate: negate, 
        "-": $minus, 
        "*": $times, 
        zero: zero, 
        "+": $plus, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "<$>": $less$dollar$greater, 
        "$": $dollar, 
        "<<<": $less$less$less, 
        flip: flip, 
        semigroupoidArr: semigroupoidArr, 
        semiringNumber: semiringNumber, 
        ringNumber: ringNumber, 
        eqNumber: eqNumber, 
        ordNumber: ordNumber, 
        boolLikeBoolean: boolLikeBoolean, 
        semigroupString: semigroupString
    };
})();
var PS = PS || {};
PS.$$Math = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var abs = Math.abs;;
    function max(n1){  return function(n2) {    return Math.max(n1, n2);  }};
    function min(n1){  return function(n2) {    return Math.min(n1, n2);  }};
    return {
        min: min, 
        max: max, 
        abs: abs
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function runFn2(fn) {
      return function(a) {
        return function(b) {
          return fn(a, b);
        };
      };
    }
    ;
    
    function runFn3(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return fn(a, b, c);
          };
        };
      };
    }
    ;
    
    function runFn4(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return fn(a, b, c, d);
            };
          };
        };
      };
    }
    ;
    return {
        runFn4: runFn4, 
        runFn3: runFn3, 
        runFn2: runFn2
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Mario = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $$Math = PS.$$Math;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_Eff_Random = PS.Control_Monad_Eff_Random;
    var DOM = PS.DOM;
    var Left = (function () {
        function Left() {

        };
        Left.value = new Left();
        return Left;
    })();
    var Right = (function () {
        function Right() {

        };
        Right.value = new Right();
        return Right;
    })();
    var Walking = (function () {
        function Walking() {

        };
        Walking.value = new Walking();
        return Walking;
    })();
    var Standing = (function () {
        function Standing() {

        };
        Standing.value = new Standing();
        return Standing;
    })();
    var Jumping = (function () {
        function Jumping() {

        };
        Jumping.value = new Jumping();
        return Jumping;
    })();
    var velocity = function (s) {
        var _272 = {};
        for (var _273 in s) {
            if (s.hasOwnProperty(_273)) {
                _272[_273] = s[_273];
            };
        };
        _272.x = s.x + s.dx;
        _272.y = s.y + s.dy;
        return _272;
    };
    var minJumpSpeed = 2.5;
    var maxMoveSpeed = 2.5;
    var jumpCoefficient = 0.4;
    var isAirborne = function (s) {
        return s.y > 0;
    };
    var groundFriction = 0.1;
    var groundAccel = 6.0e-2;
    var gravity = 0.1;
    var jump = function (_44) {
        return function (s) {
            if (_44 && !isAirborne(s)) {
                var _276 = {};
                for (var _277 in s) {
                    if (s.hasOwnProperty(_277)) {
                        _276[_277] = s[_277];
                    };
                };
                _276.dy = minJumpSpeed + jumpCoefficient * $$Math.abs(s.dx);
                return _276;
            };
            if (!_44 && (isAirborne(s) && s.dy > 0)) {
                var _278 = {};
                for (var _279 in s) {
                    if (s.hasOwnProperty(_279)) {
                        _278[_279] = s[_279];
                    };
                };
                _278.dy = s.dy - gravity;
                return _278;
            };
            return s;
        };
    };
    var currentActivity = function (s) {
        if (isAirborne(s)) {
            return Jumping.value;
        };
        if (s.dx === 0) {
            return Standing.value;
        };
        return Walking.value;
    };
    var charSpriteDescriptor = function (s) {
        var dirDesc = function (_46) {
            if (_46 instanceof Left) {
                return "left";
            };
            if (_46 instanceof Right) {
                return "right";
            };
            throw new Error("Failed pattern match");
        };
        var activityDesc = function (_45) {
            if (_45 instanceof Walking) {
                return "walk";
            };
            if (_45 instanceof Standing) {
                return "stand";
            };
            if (_45 instanceof Jumping) {
                return "jump";
            };
            throw new Error("Failed pattern match");
        };
        return "character " + (activityDesc(currentActivity(s)) + (" " + dirDesc(s.dir)));
    };
    var applyGravity = function (s) {
        if (s.y <= -s.dy) {
            var _284 = {};
            for (var _285 in s) {
                if (s.hasOwnProperty(_285)) {
                    _284[_285] = s[_285];
                };
            };
            _284.y = 0;
            _284.dy = 0;
            return _284;
        };
        var _286 = {};
        for (var _287 in s) {
            if (s.hasOwnProperty(_287)) {
                _286[_287] = s[_287];
            };
        };
        _286.y = s.y + s.dy;
        _286.dy = s.dy - gravity;
        return _286;
    };
    var airFriction = 2.0e-2;
    var friction = function (s) {
        var _288 = isAirborne(s);
        if (_288) {
            return airFriction;
        };
        if (!_288) {
            return groundFriction;
        };
        throw new Error("Failed pattern match");
    };
    var airAccel = 4.0e-2;
    var accel = function (s) {
        var _289 = isAirborne(s);
        if (_289) {
            return airAccel;
        };
        if (!_289) {
            return groundAccel;
        };
        throw new Error("Failed pattern match");
    };
    var walk = function (_42) {
        return function (_43) {
            return function (s) {
                if (_42 && !_43) {
                    var _293 = {};
                    for (var _294 in s) {
                        if (s.hasOwnProperty(_294)) {
                            _293[_294] = s[_294];
                        };
                    };
                    _293.dx = $$Math.max(-maxMoveSpeed)(s.dx - accel(s));
                    _293.dir = Left.value;
                    return _293;
                };
                if (!_42 && _43) {
                    var _295 = {};
                    for (var _296 in s) {
                        if (s.hasOwnProperty(_296)) {
                            _295[_296] = s[_296];
                        };
                    };
                    _295.dx = $$Math.min(maxMoveSpeed)(s.dx + accel(s));
                    _295.dir = Right.value;
                    return _295;
                };
                var applyFriction = function (s_4) {
                    if (s_4.dx === 0) {
                        return s_4;
                    };
                    if ($$Math.abs(s_4.dx) <= friction(s_4)) {
                        var _298 = {};
                        for (var _299 in s_4) {
                            if (s_4.hasOwnProperty(_299)) {
                                _298[_299] = s_4[_299];
                            };
                        };
                        _298.dx = 0;
                        return _298;
                    };
                    if (s_4.dx > 0) {
                        var _300 = {};
                        for (var _301 in s_4) {
                            if (s_4.hasOwnProperty(_301)) {
                                _300[_301] = s_4[_301];
                            };
                        };
                        _300.dx = s_4.dx - friction(s_4);
                        return _300;
                    };
                    if (s_4.dx < 0) {
                        var _302 = {};
                        for (var _303 in s_4) {
                            if (s_4.hasOwnProperty(_303)) {
                                _302[_303] = s_4[_303];
                            };
                        };
                        _302.dx = s_4.dx + friction(s_4);
                        return _302;
                    };
                    throw new Error("Failed pattern match");
                };
                return applyFriction(s);
            };
        };
    };
    var marioLogic = function (inputs) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(velocity)(Prelude["<<<"](Prelude.semigroupoidArr)(applyGravity)(Prelude["<<<"](Prelude.semigroupoidArr)(walk(inputs.left)(inputs.right))(jump(inputs.jump))));
    };
    return {
        Walking: Walking, 
        Standing: Standing, 
        Jumping: Jumping, 
        Left: Left, 
        Right: Right, 
        marioLogic: marioLogic, 
        jump: jump, 
        walk: walk, 
        applyGravity: applyGravity, 
        velocity: velocity, 
        currentActivity: currentActivity, 
        friction: friction, 
        accel: accel, 
        isAirborne: isAirborne, 
        charSpriteDescriptor: charSpriteDescriptor, 
        minJumpSpeed: minJumpSpeed, 
        jumpCoefficient: jumpCoefficient, 
        airFriction: airFriction, 
        groundFriction: groundFriction, 
        airAccel: airAccel, 
        groundAccel: groundAccel, 
        maxMoveSpeed: maxMoveSpeed, 
        gravity: gravity
    };
})();
var PS = PS || {};
PS.Signal = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
  function constant(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };
    
  function mapP(constant, fun, sig) {
    var out = constant(fun(sig.get()));
    sig.subscribe(function(val) { out.set(fun(val)); });
    return out;
  };
    
  function applySigP(constant, fun, sig) {
    var out = constant(fun.get()(sig.get()));
    var produce = function() { out.set(fun.get()(sig.get())); };
    fun.subscribe(produce);
    sig.subscribe(produce);
    return out;
  };
    
  function foldpP(constant, fun, seed, sig) {
    var acc = seed;
    var out = constant(acc);
    sig.subscribe(function(val) {
      acc = fun(val)(acc);
      out.set(acc);
    });
    return out;
  };
    
  function sampleOnP(constant, sig1, sig2) {
    var out = constant(sig2.get());
    sig1.subscribe(function() {
      out.set(sig2.get());
    });
    return out;
  };
    
  function runSignal(sig) {
    return function() {
      sig.subscribe(function(val) {
        val();
      });
      return {};
    };
  };
    var $tilde$greater = function (__dict_Functor_18) {
        return Prelude.flip(Prelude["<$>"](__dict_Functor_18));
    };
    var sampleOn = Data_Function.runFn3(sampleOnP)(constant);
    var map = Data_Function.runFn3(mapP)(constant);
    var functorSignal = new Prelude.Functor(map);
    var foldp = Data_Function.runFn4(foldpP)(constant);
    var applySig = Data_Function.runFn3(applySigP)(constant);
    var applySignal = new Prelude.Apply(applySig, function () {
        return functorSignal;
    });
    return {
        "~>": $tilde$greater, 
        runSignal: runSignal, 
        sampleOn: sampleOn, 
        foldp: foldp, 
        applySig: applySig, 
        map: map, 
        constant: constant, 
        functorSignal: functorSignal, 
        applySignal: applySignal
    };
})();
var PS = PS || {};
PS.Signal_Time = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Signal = PS.Signal;
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Timer = PS.Control_Timer;
    
  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };
    return {
        now: now
    };
})();
var PS = PS || {};
PS.Signal_DOM = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Signal = PS.Signal;
    var Prelude = PS.Prelude;
    var Signal_Time = PS.Signal_Time;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Timer = PS.Control_Timer;
    var DOM = PS.DOM;
    
  function keyPressedP(constant, keyCode) {
    return function() {
      var out = constant(false);
      window.addEventListener("keydown", function(e) {
        if (e.keyCode === keyCode) out.set(true);
      });
      window.addEventListener("keyup", function(e) {
        if (e.keyCode === keyCode) out.set(false);
      });
      return out;
    };
  };
    
  function animationFrameP(constant, now) {
    return function() {
      var requestAnimFrame, cancelAnimFrame;
      if (window.requestAnimationFrame) {
        requestAnimFrame = window.requestAnimationFrame;
        cancelAnimFrame = window.cancelAnimationFrame;
      } else if (window.mozRequestAnimationFrame) {
        requestAnimFrame = window.mozRequestAnimationFrame;
        cancelAnimFrame = window.mozCancelAnimationFrame;
      } else if (window.webkitRequestAnimationFrame) {
        requestAnimFrame = window.webkitRequestAnimationFrame;
        cancelAnimFrame = window.webkitCancelAnimationFrame;
      } else if (window.msRequestAnimationFrame) {
        requestAnimFrame = window.msRequestAnimationFrame;
        cancelAnimFrame = window.msCancelAnimationFrame;
      } else if (window.oRequestAnimationFrame) {
        requestAnimFrame = window.oRequestAnimationFrame;
        cancelAnimFrame = window.oCancelAnimationFrame;
      } else {
        requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
        cancelAnimFrame = window.clearTimeout;
      }
      var out = constant(now());
      requestAnimFrame(function tick(t) {
        out.set(t); requestAnimFrame(tick);
      });
      return out;
    };
  };
    var keyPressed = Data_Function.runFn2(keyPressedP)(Signal.constant);
    var animationFrame = animationFrameP(Signal.constant, Signal_Time.now);
    return {
        keyPressed: keyPressed, 
        animationFrame: animationFrame
    };
})();
var PS = PS || {};
PS.Main = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Mario = PS.Mario;
    var Signal_DOM = PS.Signal_DOM;
    var Signal = PS.Signal;
    var Control_Monad = PS.Control_Monad;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Array = PS.Data_Array;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Traversable = PS.Data_Traversable;
    var DOM = PS.DOM;
    
  function updatePositionP(c) {
    return function() {
      if (c.node.parentNode == null) {
        document.body.insertBefore(c.node, document.body.firstChild);
      }
      c.node.style.left = c.x + "px";
      c.node.style.bottom = c.y + "px";
    };
  }
  ;
    
  function updateSpriteP(node) {
  return function(className) {
    return function() {
      node.className = className;
    };
  };}
  ;
    
  function onDOMContentLoaded(action) {
    if (document.readyState === "interactive") {
      action();
    } else {
      document.addEventListener("DOMContentLoaded", action);
    }
    return function() { return {}; };
  }
  ;
    
  function getMarioNode() { return document.getElementById("mario"); }
  ;
    var updateSprite = function (c) {
        return updateSpriteP(c.node)(Mario.charSpriteDescriptor(c));
    };
    var rightKeyCode = 39;
    var leftKeyCode = 37;
    var jumpKeyCode = 38;
    var initialState = function (marioNode) {
        return {
            mario: {
                node: marioNode, 
                x: -50, 
                y: 0, 
                dx: 3, 
                dy: 3, 
                dir: Mario.Right.value
            }
        };
    };
    var groundHeight = 40;
    var updatePosition = (function () {
        var offsetGround = function (amount) {
            return function (pos) {
                var _304 = {};
                for (var _305 in pos) {
                    if (pos.hasOwnProperty(_305)) {
                        _304[_305] = pos[_305];
                    };
                };
                _304.y = pos.y + amount;
                return _304;
            };
        };
        return Prelude["<<<"](Prelude.semigroupoidArr)(updatePositionP)(offsetGround(groundHeight));
    })();
    var render = function (gameState) {
        return function __do() {
            var _14 = gameState();
            updatePosition(_14.mario)();
            return updateSprite(_14.mario)();
        };
    };
    var gameLogic = function (inputs) {
        return function (gameState) {
            return function __do() {
                var _13 = gameState();
                var _308 = {};
                for (var _309 in _13) {
                    if (_13.hasOwnProperty(_309)) {
                        _308[_309] = _13[_309];
                    };
                };
                _308.mario = Mario.marioLogic(inputs)(_13.mario);
                return _308;
            };
        };
    };
    var main = onDOMContentLoaded(function __do() {
        var _19 = getMarioNode();
        var _18 = Signal_DOM.animationFrame();
        var _17 = Signal_DOM.keyPressed(leftKeyCode)();
        var _16 = Signal_DOM.keyPressed(rightKeyCode)();
        var _15 = Signal_DOM.keyPressed(jumpKeyCode)();
        return (function () {
            var inputs = Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(function (_0) {
                return function (_1) {
                    return function (_2) {
                        return {
                            left: _0, 
                            right: _1, 
                            jump: _2
                        };
                    };
                };
            })(_17))(_16))(_15);
            var game = Signal["~>"](Signal.functorSignal)(Signal.foldp(gameLogic)(Prelude.pure(Control_Monad_Eff.applicativeEff)(initialState(_19)))(Signal.sampleOn(_18)(inputs)))(render);
            return Signal.runSignal(game);
        })()();
    });
    return {
        main: main, 
        render: render, 
        gameLogic: gameLogic, 
        initialState: initialState, 
        getMarioNode: getMarioNode, 
        onDOMContentLoaded: onDOMContentLoaded, 
        updateSprite: updateSprite, 
        updateSpriteP: updateSpriteP, 
        updatePosition: updatePosition, 
        updatePositionP: updatePositionP, 
        jumpKeyCode: jumpKeyCode, 
        rightKeyCode: rightKeyCode, 
        leftKeyCode: leftKeyCode, 
        groundHeight: groundHeight
    };
})();
