// Generated by psc-bundle 0.7.0.0
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  //- Lattice --------------------------------------------------------------------

  exports.boolOr = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolAnd = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  //- ComplementedLattice --------------------------------------------------------

  exports.boolNot = function (b) {
    return !b;
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.conj = conj;
      this.disj = disj;
      this.not = not;
  };            
  var top = function (dict) {
      return dict.top;
  };                                                                     
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });                 
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (__dict_Applicative_2) {
      return pure(__dict_Applicative_2);
  };
  var not = function (dict) {
      return dict.not;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (__dict_Functor_5) {
      return map(__dict_Functor_5);
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var $amp$amp = function (__dict_BooleanAlgebra_13) {
      return conj(__dict_BooleanAlgebra_13);
  };
  var compose = function (dict) {
      return dict.compose;
  };                                                   
  var $less$less$less = function (__dict_Semigroupoid_14) {
      return compose(__dict_Semigroupoid_14);
  }; 
  var boundedBoolean = new Bounded(false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return boundedBoolean;
  }, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
  var bind = function (dict) {
      return dict.bind;
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (__dict_Apply_25) {
      return apply(__dict_Apply_25);
  };
  var liftA1 = function (__dict_Applicative_26) {
      return function (f) {
          return function (a) {
              return $less$times$greater(__dict_Applicative_26["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_26)(f))(a);
          };
      };
  };
  var ap = function (__dict_Monad_30) {
      return function (f) {
          return function (a) {
              return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(f)(function (_6) {
                  return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(a)(function (_5) {
                      return $$return(__dict_Monad_30["__superclass_Prelude.Applicative_0"]())(_6(_5));
                  });
              });
          };
      };
  };
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["Bounded"] = Bounded;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Semigroupoid"] = Semigroupoid;
  exports["&&"] = $amp$amp;
  exports["not"] = not;
  exports["disj"] = disj;
  exports["conj"] = conj;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["<<<"] = $less$less$less;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["boundedBoolean"] = boundedBoolean;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.max = function (n1) {
    return function (n2) {
      return Math.max(n1, n2);
    };
  };

  exports.min = function (n1) {
    return function (n2) {
      return Math.min(n1, n2);
    };
  };                         
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var $foreign = PS["Math"];
  exports["min"] = $foreign.min;
  exports["max"] = $foreign.max;
  exports["abs"] = $foreign.abs;;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $$Math = PS["Math"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];     
  var Left = (function () {
      function Left() {

      };
      Left.value = new Left();
      return Left;
  })();
  var Right = (function () {
      function Right() {

      };
      Right.value = new Right();
      return Right;
  })();
  var Walking = (function () {
      function Walking() {

      };
      Walking.value = new Walking();
      return Walking;
  })();
  var Standing = (function () {
      function Standing() {

      };
      Standing.value = new Standing();
      return Standing;
  })();
  var Jumping = (function () {
      function Jumping() {

      };
      Jumping.value = new Jumping();
      return Jumping;
  })();
  var velocity = function (c) {
      var _15 = {};
      for (var _16 in c) {
          if (c.hasOwnProperty(_16)) {
              _15[_16] = c[_16];
          };
      };
      _15.x = c.x + c.dx;
      _15.y = c.y + c.dy;
      return _15;
  };
  var minJumpSpeed = 4.0;
  var maxMoveSpeed = 2.5;
  var jumpCoefficient = 0.8;
  var isAirborne = function (c) {
      return c.y > 0.0;
  };
  var groundFriction = 0.1;
  var groundAccel = 6.0e-2;
  var gravity = 0.15;
  var jump = function (_12) {
      return function (c) {
          if (_12 && Prelude.not(Prelude.booleanAlgebraBoolean)(isAirborne(c))) {
              var _19 = {};
              for (var _20 in c) {
                  if (c.hasOwnProperty(_20)) {
                      _19[_20] = c[_20];
                  };
              };
              _19.dy = minJumpSpeed + jumpCoefficient * $$Math.abs(c.dx);
              return _19;
          };
          if (!_12 && Prelude["&&"](Prelude.booleanAlgebraBoolean)(isAirborne(c))(c.dy > 0.0)) {
              var _21 = {};
              for (var _22 in c) {
                  if (c.hasOwnProperty(_22)) {
                      _21[_22] = c[_22];
                  };
              };
              _21.dy = c.dy - gravity;
              return _21;
          };
          return c;
      };
  };
  var charSpriteDescriptor = function (c) {
      var dirDesc = function (_14) {
          if (_14 instanceof Left) {
              return "left";
          };
          if (_14 instanceof Right) {
              return "right";
          };
          throw new Error("Failed pattern match at /Users/michael/projects/purescript-demo-mario/src/Mario.purs line 32, column 3 - line 33, column 3: " + [ _14.constructor.name ]);
      };
      var currentActivity = function (c_1) {
          if (isAirborne(c_1)) {
              return Jumping.value;
          };
          if (c_1.dx === 0.0) {
              return Standing.value;
          };
          return Walking.value;
      };
      var activityDesc = function (_13) {
          if (_13 instanceof Walking) {
              return "walk";
          };
          if (_13 instanceof Standing) {
              return "stand";
          };
          if (_13 instanceof Jumping) {
              return "jump";
          };
          throw new Error("Failed pattern match at /Users/michael/projects/purescript-demo-mario/src/Mario.purs line 29, column 1 - line 30, column 1: " + [ _13.constructor.name ]);
      };
      return "character " + (activityDesc(currentActivity(c)) + (" " + dirDesc(c.dir)));
  };
  var applyGravity = function (c) {
      if (c.y <= -c.dy) {
          var _27 = {};
          for (var _28 in c) {
              if (c.hasOwnProperty(_28)) {
                  _27[_28] = c[_28];
              };
          };
          _27.y = 0.0;
          _27.dy = 0.0;
          return _27;
      };
      var _29 = {};
      for (var _30 in c) {
          if (c.hasOwnProperty(_30)) {
              _29[_30] = c[_30];
          };
      };
      _29.dy = c.dy - gravity;
      return _29;
  };
  var airFriction = 2.0e-2;
  var friction = function (c) {
      var _31 = isAirborne(c);
      if (_31) {
          return airFriction;
      };
      if (!_31) {
          return groundFriction;
      };
      throw new Error("Failed pattern match at /Users/michael/projects/purescript-demo-mario/src/Mario.purs line 52, column 1 - line 53, column 1: " + [ _31.constructor.name ]);
  };
  var airAccel = 4.0e-2;
  var accel = function (c) {
      var _32 = isAirborne(c);
      if (_32) {
          return airAccel;
      };
      if (!_32) {
          return groundAccel;
      };
      throw new Error("Failed pattern match at /Users/michael/projects/purescript-demo-mario/src/Mario.purs line 49, column 1 - line 50, column 1: " + [ _32.constructor.name ]);
  };
  var walk = function (_10) {
      return function (_11) {
          return function (c) {
              if (_10 && !_11) {
                  var _36 = {};
                  for (var _37 in c) {
                      if (c.hasOwnProperty(_37)) {
                          _36[_37] = c[_37];
                      };
                  };
                  _36.dx = $$Math.max(-maxMoveSpeed)(c.dx - accel(c));
                  _36.dir = Left.value;
                  return _36;
              };
              if (!_10 && _11) {
                  var _38 = {};
                  for (var _39 in c) {
                      if (c.hasOwnProperty(_39)) {
                          _38[_39] = c[_39];
                      };
                  };
                  _38.dx = $$Math.min(maxMoveSpeed)(c.dx + accel(c));
                  _38.dir = Right.value;
                  return _38;
              };
              var applyFriction = function (c_2) {
                  if (c_2.dx === 0.0) {
                      return c_2;
                  };
                  if ($$Math.abs(c_2.dx) <= friction(c_2)) {
                      var _41 = {};
                      for (var _42 in c_2) {
                          if (c_2.hasOwnProperty(_42)) {
                              _41[_42] = c_2[_42];
                          };
                      };
                      _41.dx = 0.0;
                      return _41;
                  };
                  if (c_2.dx > 0.0) {
                      var _43 = {};
                      for (var _44 in c_2) {
                          if (c_2.hasOwnProperty(_44)) {
                              _43[_44] = c_2[_44];
                          };
                      };
                      _43.dx = c_2.dx - friction(c_2);
                      return _43;
                  };
                  if (c_2.dx < 0.0) {
                      var _45 = {};
                      for (var _46 in c_2) {
                          if (c_2.hasOwnProperty(_46)) {
                              _45[_46] = c_2[_46];
                          };
                      };
                      _45.dx = c_2.dx + friction(c_2);
                      return _45;
                  };
                  throw new Error("Failed pattern match at /Users/michael/projects/purescript-demo-mario/src/Mario.purs line 71, column 3 - line 72, column 3: " + [ c_2.constructor.name ]);
              };
              return applyFriction(c);
          };
      };
  };
  var marioLogic = function (inputs) {
      return Prelude["<<<"](Prelude.semigroupoidFn)(velocity)(Prelude["<<<"](Prelude.semigroupoidFn)(applyGravity)(Prelude["<<<"](Prelude.semigroupoidFn)(walk(inputs.left)(inputs.right))(jump(inputs.jump))));
  };
  exports["Walking"] = Walking;
  exports["Standing"] = Standing;
  exports["Jumping"] = Jumping;
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["marioLogic"] = marioLogic;
  exports["jump"] = jump;
  exports["walk"] = walk;
  exports["applyGravity"] = applyGravity;
  exports["velocity"] = velocity;
  exports["friction"] = friction;
  exports["accel"] = accel;
  exports["isAirborne"] = isAirborne;
  exports["charSpriteDescriptor"] = charSpriteDescriptor;
  exports["minJumpSpeed"] = minJumpSpeed;
  exports["jumpCoefficient"] = jumpCoefficient;
  exports["airFriction"] = airFriction;
  exports["groundFriction"] = groundFriction;
  exports["airAccel"] = airAccel;
  exports["groundAccel"] = groundAccel;
  exports["maxMoveSpeed"] = maxMoveSpeed;
  exports["gravity"] = gravity;;
 
})(PS["Mario"] = PS["Mario"] || {});
(function(exports) {
  // module Mario.DOM

  exports.updatePositionP =
    function updatePositionP(c) {
      return function() {
        c.node.style.left = c.x + "px";
        c.node.style.bottom = c.y + "px";
      };
    };

  exports.updateSpriteP =
    function updateSpriteP(node) {
      return function(className) {
        return function() {
          node.className = className;
        };
      };
    };

  exports.onDOMContentLoaded =
    function onDOMContentLoaded(action) {
      return function() {
        if (document.readyState === "interactive") {
          action();
        } else {
          document.addEventListener("DOMContentLoaded", action);
        }
        return {};
      };
    };

  exports.getMarioNode =
    function getMarioNode() {
      return document.getElementById("mario");
    };
 
})(PS["Mario.DOM"] = PS["Mario.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var $foreign = PS["Mario.DOM"];
  var Prelude = PS["Prelude"];
  var Mario = PS["Mario"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];     
  var updateSprite = function (c) {
      return $foreign.updateSpriteP(c.node)(Mario.charSpriteDescriptor(c));
  };
  var groundHeight = 40.0;
  var updatePosition = (function () {
      var offsetY = function (amount) {
          return function (c) {
              var _16 = {};
              for (var _17 in c) {
                  if (c.hasOwnProperty(_17)) {
                      _16[_17] = c[_17];
                  };
              };
              _16.y = c.y + amount;
              return _16;
          };
      };
      return Prelude["<<<"](Prelude.semigroupoidFn)($foreign.updatePositionP)(offsetY(groundHeight));
  })();
  exports["updateSprite"] = updateSprite;
  exports["updatePosition"] = updatePosition;
  exports["groundHeight"] = groundHeight;
  exports["getMarioNode"] = $foreign.getMarioNode;
  exports["onDOMContentLoaded"] = $foreign.onDOMContentLoaded;;
 
})(PS["Mario.DOM"] = PS["Mario.DOM"] || {});
(function(exports) {
  // module Signal.DOM

  exports.keyPressedP =
    function keyPressedP(constant) {
      return function(keyCode) {
        return function() {
          var out = constant(false);
          window.addEventListener("keydown", function(e) {
            if (e.keyCode === keyCode) out.set(true);
          });
          window.addEventListener("keyup", function(e) {
            if (e.keyCode === keyCode) out.set(false);
          });
          return out;
        };
      };
    };

  exports.animationFrameP =
    function animationFrameP(constant) {
      return function(now) {
        return function() {
          var requestAnimFrame, cancelAnimFrame;
          if (window.requestAnimationFrame) {
            requestAnimFrame = window.requestAnimationFrame;
            cancelAnimFrame = window.cancelAnimationFrame;
          } else if (window.mozRequestAnimationFrame) {
            requestAnimFrame = window.mozRequestAnimationFrame;
            cancelAnimFrame = window.mozCancelAnimationFrame;
          } else if (window.webkitRequestAnimationFrame) {
            requestAnimFrame = window.webkitRequestAnimationFrame;
            cancelAnimFrame = window.webkitCancelAnimationFrame;
          } else if (window.msRequestAnimationFrame) {
            requestAnimFrame = window.msRequestAnimationFrame;
            cancelAnimFrame = window.msCancelAnimationFrame;
          } else if (window.oRequestAnimationFrame) {
            requestAnimFrame = window.oRequestAnimationFrame;
            cancelAnimFrame = window.oCancelAnimationFrame;
          } else {
            requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
            cancelAnimFrame = window.clearTimeout;
          }
          var out = constant(now());
          requestAnimFrame(function tick(t) {
            out.set(t); requestAnimFrame(tick);
          });
          return out;
        };
      };
    };
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // module Signal

  exports.constant =
    function constant(initial) {
      var subs = [];
      var val = initial;
      var sig = {
        subscribe: function(sub) {
          subs.push(sub);
          sub(val);
        },
        get: function() { return val; },
        set: function(newval) {
          val = newval;
          subs.forEach(function(sub) { sub(newval); });
        }
      };
      return sig;
    };

  exports.mapSigP =
    function mapSigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun(sig.get()));
          sig.subscribe(function(val) { out.set(fun(val)); });
          return out;
        };
      };
    };


  exports.applySigP =
    function applySigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun.get()(sig.get()));
          var produce = function() { out.set(fun.get()(sig.get())); };
          fun.subscribe(produce);
          sig.subscribe(produce);
          return out;
        };
      };
    };

  exports.foldpP =
    function foldpP(constant) {
      return function(fun) {
        return function(seed) {
          return function(sig) {
            var acc = seed;
            var out = constant(acc);
            sig.subscribe(function(val) {
              acc = fun(val)(acc);
              out.set(acc);
            });
            return out;
          };
        };
      };
    };

  exports.sampleOnP =
    function sampleOnP(constant) {
      return function(sig1) {
        return function(sig2) {
          var out = constant(sig2.get());
          sig1.subscribe(function() {
            out.set(sig2.get());
          });
          return out;
        };
      };
    };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var $foreign = PS["Signal"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"]; 
  var sampleOn = $foreign.sampleOnP($foreign.constant);
  var mapSig = $foreign.mapSigP($foreign.constant);
  var functorSignal = new Prelude.Functor(mapSig);
  var foldp = $foreign.foldpP($foreign.constant);
  var applySig = $foreign.applySigP($foreign.constant);
  var applySignal = new Prelude.Apply(function () {
      return functorSignal;
  }, applySig);
  exports["sampleOn"] = sampleOn;
  exports["foldp"] = foldp;
  exports["applySig"] = applySig;
  exports["mapSig"] = mapSig;
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["constant"] = $foreign.constant;;
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
      

  exports.now =
    function now() {
      var perf = typeof performance !== 'undefined' ? performance : null,
          proc = typeof process !== 'undefined' ? process : null;
      return (
        perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
        (proc && proc.hrtime && function() {
          var t = proc.hrtime();
          return (t[0] * 1e9 + t[1]) / 1e6;
        }) ||
        Date.now
      ).call(perf);
    };
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Signal = PS["Signal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  exports["now"] = $foreign.now;;
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var $foreign = PS["Signal.DOM"];
  var Signal = PS["Signal"];
  var Prelude = PS["Prelude"];
  var Signal_Time = PS["Signal.Time"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var DOM = PS["DOM"];                                     
  var keyPressed = $foreign.keyPressedP(Signal.constant);
  var animationFrame = $foreign.animationFrameP(Signal.constant)(Signal_Time.now);
  exports["keyPressed"] = keyPressed;
  exports["animationFrame"] = animationFrame;;
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.7.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Mario_DOM = PS["Mario.DOM"];
  var Mario = PS["Mario"];
  var Signal_DOM = PS["Signal.DOM"];
  var Signal = PS["Signal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Signal_Time = PS["Signal.Time"];     
  var rightKeyCode = 39;
  var render = function (gameState) {
      return function __do() {
          var _5 = gameState();
          Mario_DOM.updatePosition(_5.mario)();
          return Mario_DOM.updateSprite(_5.mario)();
      };
  };
  var leftKeyCode = 37;
  var jumpKeyCode = 38;
  var initialState = function __do() {
      var _3 = Mario_DOM.getMarioNode();
      return Prelude["return"](Control_Monad_Eff.applicativeEff)({
          mario: {
              node: _3, 
              x: -50.0, 
              y: 0.0, 
              dx: 3.0, 
              dy: 6.0, 
              dir: Mario.Right.value
          }
      })();
  };
  var gameLogic = function (inputs) {
      return function (gameState) {
          return function __do() {
              var _4 = gameState();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)((function () {
                  var _20 = {};
                  for (var _21 in _4) {
                      if (_4.hasOwnProperty(_21)) {
                          _20[_21] = _4[_21];
                      };
                  };
                  _20.mario = Mario.marioLogic(inputs)(_4.mario);
                  return _20;
              })())();
          };
      };
  };
  var main = Mario_DOM.onDOMContentLoaded(function __do() {
      var _9 = Signal_DOM.animationFrame();
      var _8 = Signal_DOM.keyPressed(leftKeyCode)();
      var _7 = Signal_DOM.keyPressed(rightKeyCode)();
      var _6 = Signal_DOM.keyPressed(jumpKeyCode)();
      return (function () {
          var inputs = Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(function (_0) {
              return function (_1) {
                  return function (_2) {
                      return {
                          left: _0, 
                          right: _1, 
                          jump: _2
                      };
                  };
              };
          })(_8))(_7))(_6);
          var game = Signal.foldp(gameLogic)(initialState)(Signal.sampleOn(_9)(inputs));
          return Signal.runSignal(Prelude["<$>"](Signal.functorSignal)(render)(game));
      })()();
  });
  exports["main"] = main;;
 
})(PS["Mario.Main"] = PS["Mario.Main"] || {});

PS["Mario.Main"].main();